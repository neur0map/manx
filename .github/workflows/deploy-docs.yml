name: Deploy Documentation

on:
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - 'README.md'
      - '.github/workflows/deploy-docs.yml'
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: docs/package-lock.json

      - name: Install dependencies
        run: |
          cd docs
          npm ci

      - name: Convert MP4 to GIF if needed
        run: |
          # Check for new demo file first, then fall back to old one
          if [ -f "manx-demo.mp4" ] && [ ! -f "docs/src/assets/demo.gif" ]; then
            sudo apt-get update
            sudo apt-get install -y ffmpeg
            mkdir -p docs/src/assets
            ffmpeg -i manx-demo.mp4 -filter_complex "setpts=0.667*PTS,fps=10,scale=600:-1:flags=lanczos,split[s0][s1];[s0]palettegen=max_colors=64[p];[s1][p]paletteuse=dither=bayer:bayer_scale=2" -loop 0 docs/src/assets/demo.gif
            echo "✅ Converted new demo MP4 to optimized full-length GIF (1.5x speed, 10fps, 11MB)"
          elif [ -f "manx.mp4" ] && [ ! -f "docs/src/assets/demo.gif" ]; then
            sudo apt-get update
            sudo apt-get install -y ffmpeg
            mkdir -p docs/src/assets
            ffmpeg -i manx.mp4 -filter_complex "setpts=0.667*PTS,fps=10,scale=600:-1:flags=lanczos,split[s0][s1];[s0]palettegen=max_colors=64[p];[s1][p]paletteuse=dither=bayer:bayer_scale=2" -loop 0 docs/src/assets/demo.gif
            echo "✅ Converted fallback MP4 to optimized full-length GIF (1.5x speed, 10fps, 11MB)"
          else
            echo "⏭️ Skipping GIF conversion (already exists or MP4 not found)"
          fi

      - name: Copy logo
        run: |
          if [ -f "logo.png" ]; then
            mkdir -p docs/src/assets
            cp logo.png docs/src/assets/
          fi

      - name: Fetch GitHub stats
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch repository stats
          STARS=$(gh api repos/${{ github.repository }} --jq '.stargazers_count')
          FORKS=$(gh api repos/${{ github.repository }} --jq '.forks_count')
          
          # Fetch download count from releases
          DOWNLOADS=$(gh api repos/${{ github.repository }}/releases --jq '[.[].assets[].download_count] | add // 0')
          
          # Fetch latest version
          LATEST_VERSION=$(gh api repos/${{ github.repository }}/releases/latest --jq '.tag_name // "v0.0.0"' || echo "v0.0.0")
          
          # Create stats file for the build
          cat > docs/src/content/stats.json << EOF
          {
            "stars": $STARS,
            "forks": $FORKS,
            "downloads": $DOWNLOADS,
            "version": "$LATEST_VERSION",
            "updated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF
          
          echo "📊 Stats: ⭐ $STARS stars, 🍴 $FORKS forks, 📥 $DOWNLOADS downloads, 🏷️ $LATEST_VERSION"

      - name: Build documentation
        run: |
          cd docs
          npm run build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4